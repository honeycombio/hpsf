kind: OTelHTTPExporter
name: OTel HTTP Exporter
style: exporter
logo: opentelemetry
type: base
status: alpha
version: v0.1.0
summary: Sends telemetry in OTLP (OpenTelemetry) format via HTTP.
description: |
  Exports OpenTelemetry signals using OTLP via HTTP.
tags:
  - category:exporter
  - service:collector
  - signal:OTelTraces
  - signal:OTelMetrics
  - signal:OTelLogs
ports:
  - name: Traces
    direction: input
    type: OTelTraces
  - name: Metrics
    direction: input
    type: OTelMetrics
  - name: Logs
    direction: input
    type: OTelLogs
properties:
  - name: Headers
    summary: Headers to emit when sending HTTP traffic.
    description: |
      Sending data to a backend may require additional headers to be
      configured. This properties supports sending a map of header keys and
      values.
    type: map
    subtype: header
  - name: Host
    summary: The hostname or IP address to send data to.
    description: |
      Hostname or IP address on which to send outgoing HTTP traffic.
    type: string
    validations:
      - noblanks
    default: https://api.honeycomb.io
    advanced: true
  - name: Port
    summary: The port on which to send HTTP traffic.
    description: |
      The port on which to send outgoing HTTP traffic. Default is 443, which is
      the value expected by Honeycomb. The OTel standard for HTTP is 4318.
    type: int
    validations:
      - inrange(1, 65535)
    default: 443
    advanced: true
  - name: Insecure
    summary: Provide a way to disable TLS export.
    description: |
      Can be used to send data without TLS.
    type: bool
    default: false
    advanced: true
templates:
  - kind: collector_config
    name: otel_http_exporter_collector
    format: collector
    meta:
      componentSection: exporters
      signalTypes: [traces, metrics, logs] # we'll generate a name for each pipeline if there's more than 1
      collectorComponentName: otlphttp
    data:
      - key: "{{ .ComponentName }}.endpoint"
        value: "{{ .Data.Host }}:{{ .Data.Port }}"
      - key: "{{ .ComponentName }}.tls.insecure"
        value: "{{ .HProps.Insecure | encodeAsBool }}"
        suppress_if: "{{ not .HProps.Insecure }}"
      - key: "{{ .ComponentName }}.headers"
        value: "{{ .HProps.Headers | encodeAsMap }}"
        suppress_if: "{{ not .HProps.Headers }}"
      # service is not part of the template, it's generated automatically by the collectorConfig
