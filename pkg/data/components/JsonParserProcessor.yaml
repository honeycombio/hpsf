kind: JsonParserProcessor
name: Json Parser Processor
style: processor
type: base
status: development
version: v0.0.1
summary: Converts an Attribute's JSON string value into individual attributes
description: |
  Filters traces, metrics, and logs based on rules defined
  in the configuration.
tags:
  - category:processor
  - service:collector
  - category:filter
  - signal:OTelTraces
  - signal:OTelLogs
ports:
  - name: Logs
    direction: input
    type: OTelLogs
  - name: Logs
    direction: output
    type: OTelLogs
  - name: Spans
    direction: input
    type: OTelTraces
  - name: Spans
    direction: output
    type: OTelTraces
properties:
  - name: Attribute
    type: string
    default: "body"
  - name: Signal
    type: string
    subtype: oneof(span, log)
    default: "log"
    validations:
      - oneof(span, log)
templates:
  - kind: collector_config
    name: otel_filter
    format: collector
    meta:
      componentSection: processors
      signalTypes: [logs, traces] # we'll generate a name for each pipeline if there's more than 1
      collectorComponentName: transform
    data:
      - key: "{{ .ComponentName }}.error_mode"
        value: "ignore"
      - key: "{{ .ComponentName }}.{{ if eq .Values.Signal \"span\" }}trace_statements{{ else if eq .Values.Signal \"log\" }}log_statements{{ end }}[0].conditions[0]"
        value: |
          {{- $attributeName := .Values.Attribute }}
          {{- $signalType := .Values.Signal }}
          {{- $attributeString := printf "%s.attributes[\"%s\"]" $signalType $attributeName }}
          {{- if and (eq $attributeName "body") (eq $signalType "log") }}
          {{- $attributeString = "log.body" }}
          {{- end -}}
          {{- $attributeString }} != nil and HasPrefix({{ $attributeString }}, "{")
      - key: "{{ .ComponentName }}.{{ if eq .Values.Signal \"span\" }}trace_statements{{ else if eq .Values.Signal \"log\" }}log_statements{{ end }}[0].statements[0]"
        value: |
          {{- $attributeName := .Values.Attribute }}
          {{- $signalType := .Values.Signal }}
          {{- $attributeString := printf "%s.attributes[\"%s\"]" $signalType $attributeName }}
          {{- if and (eq $attributeName "body") (eq $signalType "log") }}
          {{- $attributeString = "log.body" }}
          {{- end -}}
          set({{ $signalType }}.cache, ParseJSON({{ $attributeString }})
      - key: "{{ .ComponentName }}.{{ if eq .Values.Signal \"span\" }}trace_statements{{ else if eq .Values.Signal \"log\" }}log_statements{{ end }}[0].statements[1]"
        value: |
          flatten({{ .Values.Signal }}.cache, \"\")
      - key: "{{ .ComponentName }}.{{ if eq .Values.Signal \"span\" }}trace_statements{{ else if eq .Values.Signal \"log\" }}log_statements{{ end }}[0].statements[2]"
        value: |
          merge_maps({{ .Values.Signal }}.attributes, {{ .Values.Signal }}.cache, "upsert")

