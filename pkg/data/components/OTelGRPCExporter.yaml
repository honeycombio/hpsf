kind: OTelGRPCExporter
name: otel_grpc_exporter
version: v0.1.0
summary: Exports OTLP (OpenTelemetry) traffic via gRPC
description: |
  Exports OpenTelemetry signals using OTLP via gRPC.
ports:
  - name: Traces
    direction: input
    type: OTelTraces
  - name: Metrics
    direction: input
    type: OTelMetrics
  - name: Logs
    direction: input
    type: OTelLogs
properties:
  - name: Host
    summary: The hostname or IP address to send data to
    description: |
      Hostname or IP address on which to send outgoing GRPC traffic.
    type: string
    validations: [nonblank]
    default: https://api.honeycomb.io
  - name: Port
    summary: The port on which to send gRPC traffic.
    description: |
      The port on which to send outgoing gRPC traffic. Default is 443, which is
      the value expected by Honeycomb. The OTel standard for gRPC is 4317.
    type: integer
    validations: [integer]
    default: 443
  - name: Headers
    summary: Headers to emit when sending gRPC traffic.
    description: |
      Sending data to a backend may require additional headers to be
      configured. This property supports sending a map of header keys and
      values.
    type: map
    validations: [map]
templates:
  - kind: collector_config
    name: otel_grpc_exporter_collector
    format: collector
    meta:
      componentSection: exporters
      signalTypes: [traces, metrics, logs] # we'll generate a name for each pipeline if there's more than 1
      collectorComponentName: otlp
    data:
      - key: "{{ .ComponentName }}.endpoint"
        value: "{{ firstNonZero .HProps.Host .User.Host .Props.Host.Default }}:{{ firstNonZero .HProps.Port .User.Port .Props.Port.Default }}"
      - key: "{{ .ComponentName }}.headers"
        value: "{{ .HProps.Headers | encodeAsMap }}"
        suppress_if: "{{ not .HProps.Headers }}"
      # service is not part of the template, it's generated automatically by the collectorConfig