kind: TransformProcessor
name: Apply Custom OTTL Transforms
style: processor
type: base
status: development
version: v0.1.0
summary: Apply custom transform statements to traces, metrics, and logs
description: |
  An advanced processor that allows you to apply custom OpenTelemetry transform statements (OTTL)
  to traces, metrics, and logs. You can provide arrays of trace statements, metric statements, 
  and log statements to perform complex data transformations, filtering, and enrichment operations.
tags:
  - category:processor
  - service:collector
  - signal:OTelTraces
  - signal:OTelMetrics
  - signal:OTelLogs
  - input:Traces
  - input:Metrics
  - input:Logs
  - output:Traces
  - output:Metrics
  - output:Logs
ports:
  # inputs
  - name: Traces
    direction: input
    type: OTelTraces
  - name: Logs
    direction: input
    type: OTelLogs
  - name: Metrics
    direction: input
    type: OTelMetrics
  # outputs
  - name: Traces
    direction: output
    type: OTelTraces
  - name: Logs
    direction: output
    type: OTelLogs
  - name: Metrics
    direction: output
    type: OTelMetrics
properties:
  - name: ErrorMode
    type: string
    subtype: oneof(ignore, silent, propagate)
    default: ignore
    summary: How to handle errors during transformation
    description: |
      Controls how the processor handles errors during transformation:
      - ignore: Log errors but continue processing
      - silent: Ignore errors silently
      - propagate: Stop processing and return the error
    validations:
      - oneof(ignore, silent, propagate)
  - name: TraceStatements
    type: stringarray
    summary: Array of OTTL trace transform statements
    description: |
      Array of OpenTelemetry Transformation Language (OTTL) statements to apply to traces.
      Each statement can modify span attributes, perform filtering, or apply other transformations.
      Examples:
      - set(span.attributes["custom.field"], "value")
      - delete_key(span.attributes, "unwanted_field")
      - set(span.name, Concat([span.name, " - processed"], ""))
    default: []
    advanced: false
  - name: LogStatements
    type: stringarray
    summary: Array of OTTL log transform statements
    description: |
      Array of OpenTelemetry Transformation Language (OTTL) statements to apply to logs.
      Each statement can modify log attributes, body, or perform other transformations.
      Examples:
      - set(log.attributes["processed"], "true")
      - set(log.body, Concat([log.body, " [processed]"], ""))
      - delete_key(log.attributes, "sensitive_field")
    default: []
    advanced: false
  - name: MetricStatements
    type: stringarray
    summary: Array of OTTL metric transform statements
    description: |
      Array of OpenTelemetry Transformation Language (OTTL) statements to apply to metrics.
      Each statement can modify metric attributes, name, description, or perform other transformations.
      Examples:
      - set(datapoint.attributes["custom.field"], "value")
      - set(metric.description, Concat([metric.description, " (processed)"], ""))
      - delete_key(datapoint.attributes, "unwanted_field")
    default: []
    advanced: false

# Component validation to ensure at least one type of statement is provided
validations:
  - type: at_least_one_of
    properties: ["TraceStatements", "LogStatements", "MetricStatements"]

templates:
  - kind: collector_config
    name: transform_processor
    format: collector
    meta:
      componentSection: processors
      signalTypes: [logs, traces, metrics]
      collectorComponentName: transform
    data:
      - key: "{{ .ComponentName }}.error_mode"
        value: "{{ .Values.ErrorMode }}"
      # Trace statements - each statement becomes an element in trace_statements array
      - key: "{{ .ComponentName }}.trace_statements"
        value: "{{ .Values.TraceStatements | encodeAsArray }}"
        suppress_if: "{{ not .Values.TraceStatements }}"
      # Log statements - each statement becomes an element in log_statements array  
      - key: "{{ .ComponentName }}.log_statements"
        value: "{{ .Values.LogStatements | encodeAsArray }}"
        suppress_if: "{{ not .Values.LogStatements }}"
      # Metric statements - each statement becomes an element in metric_statements array
      - key: "{{ .ComponentName }}.metric_statements"
        value: "{{ .Values.MetricStatements | encodeAsArray }}"
        suppress_if: "{{ not .Values.MetricStatements }}"