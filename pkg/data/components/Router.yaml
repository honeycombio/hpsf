kind: Router
name: Route to Environment
style: router
logo: honeycomb
type: base
status: alpha
version: v0.1.0
summary: Routes traces, logs, and metrics to different Honeycomb environments
description: |-
  Routes telemetry data (traces, logs, and metrics) to different Honeycomb environments
  within the same pipeline deployment. Each Router component handles routing for a specific
  environment based on a telemetry attribute. One Router should be marked as the default
  to handle unmatched traffic.
tags:
  - category:routing
  - service:collector
  - signal:OTelTraces
  - signal:OTelMetrics
  - signal:OTelLogs
  - input:Traces
  - input:Metrics
  - input:Logs
  - output:Traces
  - output:Metrics
  - output:Logs
  - vendor:Honeycomb
ports:
  # inputs
  - name: Traces
    direction: input
    type: OTelTraces
  - name: Logs
    direction: input
    type: OTelLogs
  - name: Metrics
    direction: input
    type: OTelMetrics
  # outputs
  - name: Traces
    direction: output
    type: OTelTraces
  - name: Logs
    direction: output
    type: OTelLogs
  - name: Metrics
    direction: output
    type: OTelMetrics
properties:
  - name: EnvironmentName
    summary: The name of the Honeycomb environment to route traffic to
    description: |
      The name of the Honeycomb environment this router will route traffic to.
      This value is used to match against the routing attribute on incoming telemetry.
    type: string
    validations:
      - noblanks
      - nonempty
    advanced: false
  - name: RoutingAttribute
    summary: The telemetry attribute name to use for routing decisions
    description: |
      The name of the resource attribute that will be checked to determine which
      environment the telemetry should be routed to. For example, "deployment.environment"
      or "service.namespace". This attribute should be present on incoming telemetry data.
    type: string
    validations:
      - noblanks
    default: deployment.environment
    advanced: true
  - name: IsDefault
    summary: Whether this router should handle unmatched telemetry
    description: |
      When set to true, this router will handle all telemetry that doesn't match
      any other router's environment name. Only one Router in a workflow should have
      this set to true.
    type: bool
    default: false
    advanced: true
templates:
  - kind: collector_config
    name: router_connector
    format: collector
    meta:
      componentSection: connectors
      signalTypes: [traces, metrics, logs]
      collectorComponentName: routing
    data:
      # For default router, set default_pipelines using environment name (signal-type specific)
      # This is optional - only include if IsDefault is true
      # Use unique connector name per component (e.g., routing_traces/router_staging)
      # Note: Use underscores, not hyphens, as hyphens are invalid in OTel connector names
      - key: "routing_{{ .SignalType }}/{{ .ComponentName }}.default_pipelines"
        value: "{{ encodeAsArray (makeSlice (printf \"%s/%s\" .SignalType .Values.EnvironmentName)) }}"
        suppress_if: "{{ not .Values.IsDefault }}"
      # All routers (including default) add an entry to the routing table
      - key: "routing_{{ .SignalType }}/{{ .ComponentName }}.table[0].statement"
        value: "route() where attributes[\"{{ .Values.RoutingAttribute }}\"] == \"{{ .Values.EnvironmentName }}\""
      - key: "routing_{{ .SignalType }}/{{ .ComponentName }}.table[0].pipelines"
        value: "{{ encodeAsArray (makeSlice (printf \"%s/%s\" .SignalType .Values.EnvironmentName)) }}"
