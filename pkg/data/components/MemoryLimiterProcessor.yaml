kind: MemoryLimiterProcessor
name: Enforce Memory Limits
style: processor
type: base
status: development
version: v0.1.0
summary: Prevents out of memory situations on the collector
description: |
  A processor that prevents out-of-memory situations on the collector by monitoring
  memory usage and applying backpressure when memory limits are approached. Uses soft 
  and hard memory limits to manage memory consumption effectively. Should be placed as 
  the first processor in a pipeline for best results.
tags:
  - category:processor
  - service:collector
  - signal:OTelTraces
  - signal:OTelMetrics
  - signal:OTelLogs
  - input:Traces
  - input:Metrics
  - input:Logs
  - output:Traces
  - output:Metrics
  - output:Logs
ports:
  # inputs
  - name: Traces
    direction: input
    type: OTelTraces
  - name: Metrics
    direction: input
    type: OTelMetrics
  - name: Logs
    direction: input
    type: OTelLogs
  # outputs
  - name: Traces
    direction: output
    type: OTelTraces
  - name: Metrics
    direction: output
    type: OTelMetrics
  - name: Logs
    direction: output
    type: OTelLogs
properties:
  - name: CheckInterval
    type: duration
    default: 1s
    summary: Time between measurements of memory usage
    description: |
      The time between measurements of memory usage. The recommended value is 1 second.
      If expected traffic is very spiky, decrease this value or increase SpikeLimitMiB
      to avoid memory usage exceeding the hard limit.
    validations:
      - duration
  - name: LimitPercentage
    type: int
    default: 80
    summary: Maximum percentage of total memory for process heap
    description: |
      Maximum percentage of total memory targeted to be allocated by the process heap.
      Intended for dynamic platforms like Docker. Only supported on Linux systems with
      cgroups.
    validations:
      - inrange(0, 100)
  - name: SpikeLimitPercentage
    type: int
    default: 20
    summary: Maximum memory spike percentage expected between measurements
    description: |
      Maximum spike percentage expected between measurements of memory usage.
      Used to calculate spike_limit_mib from total available memory. Defaults to 20% if not specified.
    validations:
      - inrange(0, 100)
templates:
  - kind: collector_config
    name: memory_limiter_processor
    format: collector
    meta:
      componentSection: processors
      signalTypes: [logs, traces, metrics]
      collectorComponentName: memory_limiter
    data:
      - key: "{{ .ComponentName }}.check_interval"
        value: "{{ .Values.CheckInterval }}"
      # Percentage-based configuration
      - key: "{{ .ComponentName }}.limit_percentage"
        value: "{{ .Values.LimitPercentage | encodeAsInt }}"
        suppress_if: "{{ not .Values.LimitPercentage }}"
      - key: "{{ .ComponentName }}.spike_limit_percentage"
        value: "{{ .Values.SpikeLimitPercentage | encodeAsInt }}"
        suppress_if: "{{ not .Values.SpikeLimitPercentage }}"